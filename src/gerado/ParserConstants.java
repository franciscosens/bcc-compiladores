package gerado;

public interface ParserConstants {

    int START_SYMBOL = 45;

    int FIRST_NON_TERMINAL = 45;
    int FIRST_SEMANTIC_ACTION = 88;

    int[][] PARSER_TABLE
            = {
                {-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 5, -1, -1, -1, -1, 4, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, 6, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, 18, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 21, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 23, 23, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, 25, 26, 27, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 34, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 39, -1, -1, -1, 38, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 35, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {41, 42, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, 41, -1, 42, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 59, 59, 59, 59, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, 59, 59, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 62, 62, 62, 62, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, 62, 62, -1, -1},
                {63, 63, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, 63, -1, 63, -1, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, -1, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 66, 66, 66, 66, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, 66, 66, -1, -1},
                {-1, 70, 70, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, -1},
                {71, 71, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, 71, -1, 71, -1, 71, 71, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, 72, -1, 71, 71, 71, -1, 72, 72, 72, 72, 72, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, 74, 75, 76, 77, 78, -1, -1, -1, -1},
                {-1, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 79, -1, -1},
                {80, 80, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, 80, -1, 80, -1, 80, 80, -1, -1, -1, -1, -1, -1, -1, -1, 80, 80, 80, -1, 80, 80, 80, -1, 80, 80, 80, 80, 80, 81, 82, -1, -1},
                {-1, 83, 83, 83, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, 83, -1, -1},
                {84, 84, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, 84, -1, 84, -1, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, 84, -1, 84, 84, 84, -1, 84, 84, 84, 84, 84, 84, 84, 85, 86},
                {-1, 87, 88, 89, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, 93, -1, -1},
                {94, 94, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, 95, 94, -1, 94, -1, 94, 94, -1, -1, -1, -1, -1, -1, -1, -1, 94, 94, 94, -1, 94, 94, 94, -1, 94, 94, 94, 94, 94, 94, 94, 94, 94}
            };

    int[][] PRODUCTIONS
            = {
                {103, 8, 46, 55, 61, 10, 65, 104},
                {0},
                {23, 47},
                {2, 27, 49, 48},
                {0},
                {47},
                {50},
                {51},
                {17},
                {12},
                {21},
                {6},
                {28, 52, 29},
                {54, 53},
                {0},
                {52},
                {2, 27, 50},
                {0},
                {7, 56},
                {58, 30, 60, 57},
                {0},
                {56},
                {2, 59},
                {0},
                {32, 58},
                {3},
                {4},
                {5},
                {22},
                {11},
                {0},
                {24, 62},
                {58, 27, 64, 63},
                {0},
                {62},
                {17},
                {12},
                {21},
                {6},
                {2},
                {67, 66},
                {0},
                {65},
                {2, 68},
                {72},
                {73},
                {28, 76, 29, 69},
                {31, 76},
                {20, 28, 2, 32, 76, 29},
                {15, 27, 65, 71},
                {26, 27, 65, 9},
                {70},
                {14, 27, 65, 9},
                {25, 27, 65, 9},
                {9},
                {14, 27, 65, 9},
                {16, 28, 58, 29},
                {18, 28, 74, 29},
                {19, 28, 74, 29, 105},
                {76, 102, 75},
                {0},
                {32, 74},
                {78, 77},
                {0},
                {33, 78, 106, 77},
                {34, 78, 107, 77},
                {79},
                {22, 99},
                {11, 100},
                {35, 78, 101},
                {82, 80},
                {0},
                {81, 97, 82, 98},
                {30},
                {36},
                {37},
                {38},
                {39},
                {40},
                {84, 83},
                {0},
                {41, 84, 89, 83},
                {42, 84, 90, 83},
                {86, 85},
                {0},
                {43, 86, 91, 85},
                {44, 86, 92, 85},
                {2, 87},
                {3, 93},
                {4, 94},
                {5, 108},
                {28, 76, 29},
                {41, 86, 95},
                {42, 86, 96},
                {0},
                {13, 28, 2, 29}
            };

    String[] PARSER_ERROR
            = {
                "",
                "Era esperado fim de programa",
                "Era esperado id",
                "Era esperado constante int",
                "Era esperado constante float",
                "Era esperado contante str",
                "Era esperado bool",
                "Era esperado consts",
                "Era esperado def",
                "Era esperado end",
                "Era esperado execute",
                "Era esperado false",
                "Era esperado float",
                "Era esperado get",
                "Era esperado ifFalse",
                "Era esperado ifTrue",
                "Era esperado input",
                "Era esperado int",
                "Era esperado print",
                "Era esperado println",
                "Era esperado set",
                "Era esperado str",
                "Era esperado true",
                "Era esperado types",
                "Era esperado var",
                "Era esperado whileFalse",
                "Era esperado whileTrue",
                "Era esperado \":\"",
                "Era esperado \"(\"",
                "Era esperado \")\"",
                "Era esperado \"=\"",
                "Era esperado \":=\"",
                "Era esperado \",\"",
                "Era esperado \"&&\"",
                "Era esperado \"||\"",
                "Era esperado \"!\"",
                "Era esperado \"!=\"",
                "Era esperado \"<\"",
                "Era esperado \"<=\"",
                "Era esperado \">\"",
                "Era esperado \">=\"",
                "Era esperado \"+\"",
                "Era esperado \"-\"",
                "Era esperado \"*\"",
                "Era esperado \"/\"",
                "esperado def", // "<prog> inválido",
                "esperado consts, execute, types, var", // "<defTipos> inválido",
                "esperado id", //"<aux_tipo> inválido",
                "esperado id, consts, execute, var", // "<aux_tipo1> inválido",
                "esperado bool, float, int, str, (", //"<doTipo> inválido",
                "esperado bool, float, int, str", //"<simples> inválido",
                "esperado (", //"<composto> inválido",
                "esperado id", //"<listaCampos> inválido",
                "esperado id, )", //"<listaCampos1> inválido",
                "esperado id", //"<campo> inválido",
                "esperado consts, execute, var", //"<defConstantes> inválido",
                "esperado id", //"<aux_consts> inválido",
                "esperado id, exceute, var", //"<aux_consts1> inválido",
                "esperado id", //"<listaId> inválido",
                "esperado :, ), =, ','", //"<listaId1> inválido", 
                "esperado constante inteira, contante float, constante str, false, true", //"<valor> inválido",
                "esperado execute, var", //"<decVariaveis> inválido",
                "esperado id", //"<aux_var> inválido",
                "esperado id, execute", //"<aux_var1> inválido",
                "esperado id, bool, float, int, str", //"<tipo> inválido",
                "esperado ", //"<listaComandos> inválido",
                "", //"<listaComandos1> inválido",
                "esperado comando", // "<comando> inválido",
                "esperado set, :=",// "<comando1> inválido",
                "esperado ifFalse, ifTrue, whileFalse, whileTrue,",// "<comando2> inválido",
                "esperado ifFalse, whileFalse",// "<comando3> inválido",
                "esperado end, ifFalse",// "<comando4> inválido",
                "esperado input",// "<entradaDados> inválido",
                "esperado print, println",// "<saidaDados> inválido",
                "esperado id, constante inteira, contante float, constante str, false, true, (, !, +, -",// "<listaExpressoes> inválido",
                "esperado ), ',', ",// "<listaExpressoes1> inválido",
                "esperado id, constante inteira, contante float, constante str, false, true, (, !, +, -",// "<expressao> inválido",
                "esperado fim do programa, comando, end, ifFalse, ), ',', &&, ||",// "<expressao1> inválido",
                "esperado id, coonstante inteira, constante float, constante str, false, true, (, !, +, -",// "<elemento> inválido",
                "esperado id, coonstante inteira, constante float, constante str, (, +, -",// "<relacional> inválido",
                "esperado fim do programa, id, end, ifFalse, input, print, println, (, ), =, ',', &&, ||, !=, <, <=, >, >= ",// "<relacional1> inválido",
                "esperado =, !=, <, <= >, >=",// "<operador_relacional> inválido",
                "esperado id, coonstante inteira, constante float, constante str, (, +, -",// "<aritmetica> inválido",
                "esperado fim do programa, id, end, ifFalse, input, print, println, (, ), =, ',', &&, ||, !=, <, <=, >, >= , +, -",// "<aritmetica1> inválido",
                "esperado id, coonstante inteira, constante float, constante str, (, +, -",// "<termo> inválido",
                "esperado fim do programa, id, end, ifFalse, input, print, println, (, ), =, ',', &&, ||, !=, <, <=, >, >= , +, -, *, /",// "<termo1> inválido",
                "esperado id, coonstante inteira, constante float, constante str, (, +, -",// "<fator> inválido",
                "esperado fim do programa, id, end, get, ifFalse, input, print, println, (, ), =, ',', &&, ||, !=, <, <=, >, >= , +, -, *, /",// "<fator1> inválido"
            };
}
